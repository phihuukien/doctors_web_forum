// <auto-generated />
using System;
using Doctors_Web_Forum_FE.BusinessModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Doctors_Web_Forum_FE.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230111124542_v6")]
    partial class v6
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Doctors_Web_Forum_FE.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("About")
                        .HasColumnType("ntext");

                    b.Property<bool>("Access_rights");

                    b.Property<string>("Achievement")
                        .HasColumnType("ntext");

                    b.Property<string>("Avatar")
                        .HasMaxLength(1000);

                    b.Property<DateTime?>("BirthDay");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Experience")
                        .HasColumnType("ntext");

                    b.Property<bool>("Gender");

                    b.Property<string>("LinkFaceBook")
                        .HasColumnType("ntext");

                    b.Property<string>("LinkTiktok")
                        .HasColumnType("ntext");

                    b.Property<string>("LinkYoutube")
                        .HasColumnType("ntext");

                    b.Property<string>("Location")
                        .HasMaxLength(200);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Qualification");

                    b.Property<string>("Role");

                    b.Property<string>("Specialization");

                    b.Property<int?>("Status");

                    b.Property<string>("Token")
                        .HasMaxLength(200);

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("AccountId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Doctors_Web_Forum_FE.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<string>("Content")
                        .HasColumnType("ntext");

                    b.Property<DateTime>("CreateDate");

                    b.Property<int>("QuestionId");

                    b.Property<int>("Reply");

                    b.Property<bool>("Status");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("CommentId");

                    b.HasIndex("AccountId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Doctors_Web_Forum_FE.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId");

                    b.Property<DateTime>("CreateDate");

                    b.Property<string>("Detail")
                        .HasColumnType("ntext");

                    b.Property<bool>("Status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<int>("TopicId");

                    b.Property<int>("TotalQuestion");

                    b.Property<DateTime>("UpdateDate");

                    b.HasKey("QuestionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("TopicId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Doctors_Web_Forum_FE.Models.Topic", b =>
                {
                    b.Property<int>("TopicId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Status");

                    b.Property<string>("TopicName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TopicId");

                    b.ToTable("Topic");
                });

            modelBuilder.Entity("Doctors_Web_Forum_FE.Models.Comment", b =>
                {
                    b.HasOne("Doctors_Web_Forum_FE.Models.Account", "Account")
                        .WithMany("Comments")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctors_Web_Forum_FE.Models.Question", "Question")
                        .WithMany("Comments")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Doctors_Web_Forum_FE.Models.Question", b =>
                {
                    b.HasOne("Doctors_Web_Forum_FE.Models.Account", "Account")
                        .WithMany("Questions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Doctors_Web_Forum_FE.Models.Topic", "Topic")
                        .WithMany("Questions")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
